@inject IService service
@inject IJSRuntime js
@inject NavigationManager navigate


<div class="card">
    <div class="card-header d-flex justify-content-between">
        <div>
            <h5 class="">Ajuste Inventario</h5>
        </div>
        <div class="d-flex">
            <BSButton OnClick="handleNuevo" Class="mt-2 mr-2" Color="Color.Primary" IsOutline="true" IsDisabled="@BtnNuevo" Size="Size.Small">
                <i class="bi bi-plus-circle"></i>
            </BSButton>
            <BSButton OnClick="handleGuardar" Class="mt-2 mr-2" Color="Color.Primary" IsOutline="true" IsDisabled="@BtnGuardar" Size="Size.Small">
                <i class="bi bi-save"></i>
            </BSButton>
            <BSButton OnClick="handleBuscar" Class="mt-2 mr-2" Color="Color.Info" IsOutline="true" IsDisabled="@BtnBuscar" Size="Size.Small">
                <i class="bi bi-search"></i>
            </BSButton>

            <BSButton OnClick="handleCancelar" Class="mt-2 mr-2" Color="Color.Danger" IsOutline="true" IsDisabled="@BtnCancelar" Size="Size.Small">
                <i class="bi bi-x-circle"></i>
            </BSButton>
            <BSButton OnClick="handleEliminarAjuste" Class="mt-2 mr-2" Color="Color.Danger" IsOutline="true" IsDisabled="@BtnEliminar" Size="Size.Small">
                <i class="bi bi-trash3"></i>
            </BSButton>
        </div>
    </div>
    <div class="card-body">

        @if (validarFormAjuste)
        {
            <div class="alert alert-danger" role="alert">
                @mensajeError
            </div>
        }

        <FormularioInventario AjusteVM="AjusteVM" DisabledFormulario="BlockFormulario"></FormularioInventario>

        <BSButton @onclick="AbrirModalProducto" Color="Color.Primary" title="Añadir producto" IsDisabled="@BtnAgregarProducto">
            <i class="bi bi-box mr-1"></i>Agregar Producto
        </BSButton>

        <div class="table-responsive mt-4">
            <table class="table table-bordered  table-striped table-hover">
                <thead>
                    <tr>
                        <th></th>
                        <th scope="col">Articulo</th>
                        <th scope="col">Cantidad</th>
                        <th scope="col">Costo</th>
                        <th scope="col">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var detalle in AjusteVM.DetalleAjuste)
                        {
                            <AjusteDetalle DetalleVM="detalle" SoloLectura="SoloLectura" CalcularTotales="CalcularTotales"></AjusteDetalle>
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="row d-flex justify-content-end">
            <div class="col-sm-4 col-md-8">
                <textarea @bind="@AjusteVM.Observaciones" class="form-control h-100" disabled="@txtObservaciones">

                 </textarea>
            </div>
            <div style="" class=" col-sm-6 col-md-4">

                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Total:</label>
                    <div class="col-sm-8">
                        <input @bind-value="total" disabled class="form-control" />
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<BSModal @ref="ModalProducto" IsFullWidth="true">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalProducto.Hide())">Selecciona producto</BSModalHeader>
    <BSModalBody>

        <SeleccionProductoInv SeleccionArticulo="DetalleAjusteViewModel.Articulo" AgregarDetalle="AgregarDetalle" CerraModalProducto="CerraModalProducto" />
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="() => ModalProducto.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
    </div>
</BSModal>

<BSModal @ref="ModalAjuste" IsFullWidth="true">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalAjuste.Hide())">Selecciona ajuste inventario</BSModalHeader>
    <BSModalBody>
        @*<SelectVenta SeleccionarVenta="ObtenerAjuste" />*@
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="() => ModalAjuste.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
    </div>
</BSModal>

<BSModal @ref="ModalAlertaEliminar" Size="Size.Small">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalAlertaEliminar.Hide())">Eliminar</BSModalHeader>
    <BSModalBody>
        <p>¿Está seguro de eliminar esta venta?</p>
    </BSModalBody>
    <div class="modal-footer">
            <button class="btn btn-outline-danger" @onclick="()=> ModalAlertaEliminar.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
            <button class="btn btn-outline-primary" @onclick="EliminarAjuste"><i class="bi bi-trash mr-1 "></i>Eliminar</button>
     </div>

</BSModal>

@code {
    AjusteViewModel AjusteVM = new AjusteViewModel();
    DetalleAjusteViewModel DetalleAjusteViewModel = new DetalleAjusteViewModel();

    BSModal ModalProducto { get; set; }
    BSModal ModalAjuste { get; set; }
    BSModal ModalAlertaEliminar { get; set; }

    public Response respuesta { get; set; }

    bool BtnEliminar = false;
    bool BtnNuevo = false;
    bool BtnGuardar = false;
    bool BtnBuscar = false;
    bool BtnCancelar = false;
    bool BtnAgregarProducto = false;
    bool BlockFormulario = true;
    bool txtObservaciones = true;
    bool SoloLectura = false;

    bool HabilitarFormulario = false;

    decimal total { get; set; } = 0;
    decimal subtotal { get; set; } = 0;

    bool validarFormAjuste = false;
    string mensajeError = "";
    string error = "";

    protected override void OnInitialized()
    {
        try
        {
            BtnGuardar = true;
            BtnCancelar = true;
            BtnAgregarProducto = true;
            BtnEliminar = true;
            BlockFormulario = true;
            AjusteVM.FechaCreacion = DateTime.Now;
            AjusteVM.EsAjusteEntrada = true;
        }
        catch (Exception e)
        {
            e.Message.ToString();
        }
    }

    private void CalcularTotales()
    {
        total = AjusteVM.DetalleAjuste.Sum(x => x.TotalDetalleAjuste);
    }

    protected void CerraModalProducto()
    {
        ModalProducto.Hide();
    }

    private async void ObtenerAjuste(string IdAjuste)
    {

    }

    protected async void AbrirModalProducto()
    {
        /*if (AjusteVM.Cliente.IdCliente == 0)
        {
            validarFormVenta = true;
            mensajeError = "Todos los campos del pedido son obligatorio";
        }
        else
        {*/
        BlockFormulario = true;
        validarFormAjuste = false;
        ModalProducto.Show();
        //}
    }

    private void EliminarDetalle(string IdDetalle)
    {
        int id = Convert.ToInt32(IdDetalle);
        var detalle = AjusteVM.DetalleAjuste.FirstOrDefault(x => x.IdDetalleAjuste == id);

        if (detalle != null)
        {
            AjusteVM.DetalleAjuste.Remove(detalle);
        }
        CalcularTotales();
    }

    protected void AgregarDetalle()
    {
        int IdAjusteDetalle = AjusteVM.DetalleAjuste.OrderByDescending(x => x.IdDetalleAjuste).FirstOrDefault()?.IdDetalleAjuste + 1 ?? 1;

        if (AjusteVM.DetalleAjuste.FirstOrDefault(x => x.IdArticulo == DetalleAjusteViewModel.Articulo.IdArticulo) != null)
        {
            validarFormAjuste = true;
            mensajeError = "Este articulo ya está en el detalle";
            return;
        }
        validarFormAjuste = false;
        decimal costo = DetalleAjusteViewModel.Articulo.Precios.FirstOrDefault()?.PrecioCosto ?? 0;
        decimal total = costo * 1;
        AjusteVM.DetalleAjuste.Add(new DetalleAjusteViewModel
        {
            IdDetalleAjuste = IdAjusteDetalle,
            IdArticulo = DetalleAjusteViewModel.Articulo.IdArticulo,
            Cantidad = 1,
            Articulo = DetalleAjusteViewModel.Articulo,
            Costo = DetalleAjusteViewModel.Articulo.Precios.FirstOrDefault()?.PrecioVenta ?? 0,
            TotalDetalleAjuste = total
        }
        );
        DetalleAjusteViewModel = new DetalleAjusteViewModel();

        CalcularTotales();
    }

    private async void handleGuardar()
    {
        BtnGuardar = true;

        if (AjusteVM.DetalleAjuste.Count() == 0)
        {
            mensajeError = "El pedido no tiene detalle";
            validarFormAjuste = true;
            return;
        }

        validarFormAjuste = false;

        try
        {
            respuesta = await service.GuardarAjusteInventario(AjusteVM);
            if (respuesta.Ok)
            {
                await js.InvokeVoidAsync("showAlert", "success", respuesta.Message, "");

                AjusteVM.NumeroRefencia = Convert.ToInt32(respuesta.ResponseParameter2);
                AjusteVM.IdAjuste = Convert.ToInt32(respuesta.ResponseParameter1);
                AjusteVM.DetalleAjuste.ForEach(x => x.Editable = false);
                BlockFormulario = true;

                handleCancelar();
                await Task.Delay(1700).ContinueWith((task) =>
                {
                    navigate.NavigateTo("ajusteinventario", forceLoad: true);
                });


            }
            else
            {
                await js.InvokeVoidAsync("showAlert", "error", respuesta.Message, respuesta.Error);
            }
        }
        catch (Exception ex)
        {
            mensajeError = "Ha ocurrido un error al obtener proveedores";
            error = ex.Message;
        }

    }

    private void handleCancelar()
    {
        //VentaVM = new VentaViewModel();
        //VentaVM.Fecha = DateTime.Now;
        //VentaDetalleViewModel = new DetalleVentaViewModel();
        BlockFormulario = true;
        BtnNuevo = false;
        BtnBuscar = false;
        BtnGuardar = true;
        BtnCancelar = true;
        BtnAgregarProducto = true;
        txtObservaciones = true;
        BtnEliminar = true;
        //CalcularTotales();
        mensajeError = "";
    }

    private void handleNuevo()
    {
        BlockFormulario = false;
        BtnNuevo = true;
        BtnBuscar = true;
        BtnGuardar = false;
        BtnCancelar = false;
        BtnAgregarProducto = false;
        txtObservaciones = false;
        BtnEliminar = true;
        mensajeError = "";
    }

    private void handleBuscar()
    {
        ModalAjuste.Show();
    }

    private void handleEliminarAjuste()
    {
        ModalAlertaEliminar.Show();
    }

    private async void EliminarAjuste()
    {
        try
        {

            Response resp = new Response();
            resp = await service.EliminarAjusteInventario(AjusteVM.IdAjuste);

            if (resp.Ok)
            {
                await js.InvokeVoidAsync("showAlert", "success", resp.Message, "");
                await Task.Delay(1600).ContinueWith((task) =>
                {
                    navigate.NavigateTo("ajusteinventario", forceLoad: true);
                });
            }
            else
            {
                await js.InvokeVoidAsync("showAlert", "error", resp.Message, resp.Error);
                await Task.Delay(1600).ContinueWith((task) =>
                {
                    navigate.NavigateTo("ajusteinventario", forceLoad: true);
                });
            }
        }
        catch (Exception ex)
        {

            throw;
        }
    }

}
