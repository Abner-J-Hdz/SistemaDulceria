


<div class="card">
    <div class="card-header d-flex justify-content-between">
        <div>
            <h5 class="">Ventas</h5>
        </div>
        <div class="d-flex">
            <BSButton OnClick="handleNuevo" Class="mt-2 mr-2" Color="Color.Primary" IsOutline="true" IsDisabled="@BtnNuevo" Size="Size.Small">
                <i class="bi bi-plus-circle"></i>
            </BSButton>
            <BSButton OnClick="handleGuardar" Class="mt-2 mr-2" Color="Color.Primary" IsOutline="true" IsDisabled="@BtnGuardar" Size="Size.Small">
                <i class="bi bi-save"></i>
            </BSButton>
            <BSButton OnClick="handleBuscar" Class="mt-2 mr-2" Color="Color.Info" IsOutline="true" IsDisabled="@BtnBuscar" Size="Size.Small">
                <i class="bi bi-search"></i>
            </BSButton>

            <BSButton OnClick="handleCancelar" Class="mt-2 mr-2" Color="Color.Danger" IsOutline="true" IsDisabled="@BtnCancelar" Size="Size.Small">
                <i class="bi bi-x-circle"></i>
            </BSButton>
            <BSButton OnClick="handleEliminarAjuste" Class="mt-2 mr-2" Color="Color.Danger" IsOutline="true" IsDisabled="@BtnEliminar" Size="Size.Small">
                <i class="bi bi-trash3"></i>
            </BSButton>

        </div>
    </div>
    <div class="card-body">

        @if (validarFormAjuste)
        {
            <div class="alert alert-danger" role="alert">
                @mensajeError
            </div>
        }
        @*<FormularioVenta PedidoVM="VentaVM" DisabledFormulario="BlockFormulario"></FormularioVenta>*@

        <BSButton @onclick="AbrirModalProducto" Color="Color.Primary" title="Añadir producto" IsDisabled="@BtnAgregarProducto">
            <i class="bi bi-box mr-1"></i>Agregar Producto
        </BSButton>

        <div class="table-responsive mt-4">
            <table class="table table-bordered  table-striped table-hover">
                <thead>
                    <tr>
                        <th></th>
                        <th scope="col">Articulo</th>
                        <th scope="col">Cantidad</th>
                        <th scope="col">Precio</th>
                        <th scope="col">Desc %</th>
                        <th scope="col">Descuento</th>
                        @*<th scope="col">I.V.A.</th>*@
                        <th scope="col">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var detalle in AjusteVM.DetalleAjuste)
                        {
                            @*<VentaDetalle DetalleVM="detalle" EliminarLinea="EliminarDetalle" SoloLectura="SoloLectura" CalcularTotales="CalcularTotales"></VentaDetalle>*@
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="row d-flex justify-content-end">
            <div class="col-sm-4 col-md-8">
                @*<textarea @bind="@VentaVM.Observaciones" class="form-control h-100" disabled="@txtObservaciones">

                    </textarea>*@
            </div>
            <div style="" class=" col-sm-6 col-md-4">
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Subtotal:</label>
                    <div class="col-sm-8">
                        <input @bind-value="subtotal" disabled class="form-control" />
                    </div>
                </div>
                <div class="form-group row">

                    <label class="col-sm-4 col-form-label">Total:</label>
                    <div class="col-sm-8">
                        <input @bind-value="total" disabled class="form-control" />
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<BSModal @ref="ModalProducto" IsFullWidth="true">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalProducto.Hide())">Selecciona producto</BSModalHeader>
    <BSModalBody>

        <SeleccionProducto SeleccionArticulo="DetalleAjusteViewModel.Articulo" AgregarDetalle="AgregarDetalle" CerraModalProducto="CerraModalProducto" />
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="() => ModalProducto.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
    </div>
</BSModal>

<BSModal @ref="ModalAjuste" IsFullWidth="true">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalAjuste.Hide())">Selecciona venta</BSModalHeader>
    <BSModalBody>
        <SelectVenta SeleccionarVenta="ObtenerAjuste" />
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="() => ModalAjuste.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
    </div>
</BSModal>

<BSModal @ref="ModalAlertaEliminar" Size="Size.Small">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalAlertaEliminar.Hide())">Eliminar</BSModalHeader>
    <BSModalBody>
        <p>¿Está seguro de eliminar esta venta?</p>
    </BSModalBody>
    @*<div class="modal-footer">
            <button class="btn btn-outline-danger" @onclick="()=> ModalAlertaEliminar.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
            <button class="btn btn-outline-primary" @onclick="EliminarVenta"><i class="bi bi-trash mr-1 "></i>Eliminar</button>
        </div>*@

</BSModal>

@code {
    AjusteViewModel AjusteVM = new AjusteViewModel();
    DetalleAjusteViewModel DetalleAjusteViewModel = new DetalleAjusteViewModel();

    BSModal ModalProducto { get; set; }
    BSModal ModalAjuste { get; set; }
    BSModal ModalAlertaEliminar { get; set; }

    bool BtnEliminar = false;
    bool BtnNuevo = false;
    bool BtnGuardar = false;
    bool BtnBuscar = false;
    bool BtnCancelar = false;
    bool BtnAgregarProducto = false;
    bool BlockFormulario = true;
    bool txtObservaciones = true;
    bool SoloLectura = false;

    bool HabilitarFormulario = false;

    decimal total { get; set; } = 0;
    decimal subtotal { get; set; } = 0;

    bool validarFormAjuste = false;
    string mensajeError = "";
    string error = "";

    protected void CerraModalProducto()
    {
        ModalProducto.Hide();
    }

    private async void ObtenerAjuste(string IdAjuste)
    {

    }

    protected async void AbrirModalProducto()
    {
        /*if (AjusteVM.Cliente.IdCliente == 0)
        {
            validarFormVenta = true;
            mensajeError = "Todos los campos del pedido son obligatorio";
        }
        else
        {*/
        BlockFormulario = true;
        validarFormAjuste = false;
        ModalProducto.Show();
        //}
    }

    protected void AgregarDetalle()
    {
        /*
        int IdVentaDetalle = VentaVM.DetalleVenta.OrderByDescending(x => x.IdDetalleVenta).FirstOrDefault()?.IdDetalleVenta + 1 ?? 1;

        if (VentaVM.DetalleVenta.FirstOrDefault(x => x.IdArticulo == VentaDetalleViewModel.Articulo.IdArticulo) != null)
        {
            validarFormVenta = true;
            mensajeError = "Este articulo ya está en el detalle";
            return;
        }
        validarFormVenta = false;
        decimal precio = VentaDetalleViewModel.Articulo.Precios.FirstOrDefault()?.PrecioVenta ?? 0;
        decimal total = precio * 1;
        VentaVM.DetalleVenta.Add(new DetalleVentaViewModel
        {
            IdDetalleVenta = IdVentaDetalle,
            IdArticulo = VentaDetalleViewModel.Articulo.IdArticulo,
            Cantidad = 1,
            Articulo = VentaDetalleViewModel.Articulo,
            Precio = VentaDetalleViewModel.Articulo.Precios.FirstOrDefault()?.PrecioVenta ?? 0,
            SubTotal = total,
            Total = total
        }
        );
        VentaDetalleViewModel = new DetalleVentaViewModel();
        */
        //CalcularTotales();
    }

    private async void handleGuardar()
    {
        /*  BtnGuardar = true;
          if (VentaVM.Cliente.IdCliente == 0)
          {
              mensajeError = "Todos los campos del pedido son obligatorio";
              validarFormVenta = true;
              return;
          }

          if (VentaVM.DetalleVenta.Count() == 0)
          {
              mensajeError = "El pedido no tiene detalle";
              validarFormVenta = true;
              return;
          }

          validarFormVenta = false;

          try
          {
              respuesta = await service.GuardarVentas(VentaVM);
              if (respuesta.Ok)
              {
                  await js.InvokeVoidAsync("showAlert", "success", respuesta.Message, "");

                  VentaVM.NumeroRecibo = Convert.ToInt32(respuesta.ResponseParameter2);
                  VentaVM.IdVenta = Convert.ToInt32(respuesta.ResponseParameter1);
                  VentaVM.DetalleVenta.ForEach(x => x.Editable = true);
                  BlockFormulario = true;

                  handleCancelar();

              }
              else
              {
                  await js.InvokeVoidAsync("showAlert", "error", respuesta.Message, respuesta.Error);
              }
          }
          catch (Exception ex)
          {
              mensajeError = "Ha ocurrido un error al obtener proveedores";
              error = ex.Message;
          }*/

    }

    private void handleCancelar()
    {
        //VentaVM = new VentaViewModel();
        //VentaVM.Fecha = DateTime.Now;
        //VentaDetalleViewModel = new DetalleVentaViewModel();
        BlockFormulario = true;
        BtnNuevo = false;
        BtnBuscar = false;
        BtnGuardar = true;
        BtnCancelar = true;
        BtnAgregarProducto = true;
        txtObservaciones = true;
        BtnEliminar = true;
        //CalcularTotales();
        mensajeError = "";
    }

    private void handleNuevo()
    {
        BlockFormulario = false;
        BtnNuevo = true;
        BtnBuscar = true;
        BtnGuardar = false;
        BtnCancelar = false;
        BtnAgregarProducto = false;
        txtObservaciones = false;
        BtnEliminar = true;
        mensajeError = "";
    }

    private void handleBuscar()
    {
        ModalAjuste.Show();
    }

    private async void handleEliminarAjuste()
    {
        try
        {
            /*
            Response resp = new Response();
            resp = await service.EliminarVenta(VentaVM.IdVenta);

            if (resp.Ok)
            {
                await js.InvokeVoidAsync("showAlert", "success", resp.Message, "");
                await Task.Delay(1600).ContinueWith((task) =>
                {
                    navigate.NavigateTo("ventas", forceLoad: true);
                });
            }
            else
            {
                await js.InvokeVoidAsync("showAlert", "error", resp.Message, resp.Error);
                await Task.Delay(1600).ContinueWith((task) =>
                {
                    navigate.NavigateTo("ventas", forceLoad: true);
                });
            }*/
        }
        catch (Exception ex)
        {

            throw;
        }
    }

}
