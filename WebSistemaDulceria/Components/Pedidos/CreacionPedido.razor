@inject IJSRuntime js

<div class="card">
    <div class="card-header d-flex justify-content-between">
        <div>
            <h5 class="">Pedido</h5>
        </div>
        <div>
            <button class="btn btn-sm btn-outline-primary" id="btnGuardar" title="Guardar">
                <i class="bi bi-save"></i>
            </button>
            <button class="btn btn-sm btn-outline-info" id="btnBuscar" title="Buscar">
                <i class="bi bi-search"></i>
            </button>
            <button class="btn btn-sm btn-outline-danger" id="btnCancelar" title="Cancelar">
                <i class="bi bi-x-circle"></i>
            </button>
        </div>
    </div>
    <div class="card-body">

        @if (validarFormPedido)
        {
            <div class="alert alert-danger" role="alert">
                @mensajeError
            </div>
        }

        <FormularioPedido PedidoVM="PedidoVM" />
        <button class="btn btn-primary" @onclick="AbrirModalProducto" title="Añadir producto"><i class="bi bi-box mr-1"></i>Agregar Producto</button>
        <div class="table-responsive mt-4">
            <table class="table table-bordered  table-striped table-hover">
                <thead>
                    <tr>
                        <th></th>
                        <th scope="col">Articulo</th>
                        <th scope="col">Cantidad</th>
                        <th scope="col">Precio</th>
                        <th scope="col">Descuento</th>
                        <th scope="col">I.V.A.</th>
                        <th scope="col">Total</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        foreach (var detalle in PedidoVM.DetallePedido)
                        {
                            <PedidoDetalle DetalleVM="detalle" EliminarLinea="@EliminarDetalle" CalcularTotales="CalcularTotales" />
                        }
                    }
                </tbody>
            </table>
        </div>

        <div class="d-flex justify-content-end">
            <div style="" class=" col-sm-8 col-md-4">
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Subtotal:</label>
                    <div class="col-sm-8">
                        <input @bind-value="subtotal" class="form-control" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Impuesto:</label>
                    <div class="col-sm-8">
                        <input @bind-value="impuesto" class="form-control" />
                    </div>
                </div>
                <div class="form-group row">
                    <label class="col-sm-4 col-form-label">Descuento:</label>
                    <div class="col-sm-8">
                        <input @bind-value="descuento" class="form-control" />
                    </div>
                </div>
                <div class="form-group row">

                    <label class="col-sm-4 col-form-label">Impuesto:</label>
                    <div class="col-sm-8">
                        <input @bind-value="total" class="form-control" />
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

<BSModal @ref="ModalProducto" IsFullWidth="true">
    <BSModalHeader Class="bg-primary text-white" OnClick="@(() => ModalProducto.Hide())">Selecciona producto</BSModalHeader>
    <BSModalBody>
        <SeleccionProducto SeleccionArticulo="PedidoDetalleViewModel.Articulo" AgregarDetalle="AgregarDetalle" CerraModalProducto="CerraModalProducto" />
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="() => ModalProducto.Hide()"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
    </div>
</BSModal>

@code {

    PedidoViewModel PedidoVM = new PedidoViewModel();

    DetallePedidoViewModel PedidoDetalleViewModel = new DetallePedidoViewModel();

    BSModal ModalProducto { get; set; }

    bool validarFormPedido = false;

    decimal total { get; set; } = 0;
    decimal subtotal { get; set; } = 0;
    decimal impuesto { get; set; } = 0;
    decimal descuento { get; set; } = 0;

    string mensajeError = "";

    protected override async void OnInitialized()
    {
        try
        {
            string[] elementBlock = new string[2] { "btnGuardar", "btnCancelar" };
            await js.InvokeVoidAsync("blockElement", (object)elementBlock);

        }
        catch (Exception e)
        {
            e.Message.ToString();
        }
    }

    protected async void AbrirModalProducto()
    {
        ///validar que los datos del pedido sean validos
        ///
        if (PedidoVM.NumeroFactura == null || PedidoVM.Proveedor.IdProveedor == 0 || PedidoVM.NumeroReferencia == null)
        {
            validarFormPedido = true;
            mensajeError = "Todos los campos del pedido son obligatorio";
        }
        else
        {
            string[] elementArray = new string[4] { "txtNFactura", "btnProveedor", "dtfecha", "txtNumeroReferencia" };
            await js.InvokeVoidAsync("blockElement", (object)elementArray);
            validarFormPedido = false;
            ModalProducto.Show();

        }

    }

    protected void CerraModalArticulos()
    {
        ModalProducto.Hide();
    }

    protected void AgregarDetalle()
    {
        int IdPedidoDetalle = PedidoVM.DetallePedido.OrderByDescending(x => x.IdDetallePedido).FirstOrDefault()?.IdDetallePedido + 1 ?? 1;

        //Verficar si producto ya existe
        if (PedidoVM.DetallePedido.FirstOrDefault(x => x.IdArticulo == PedidoDetalleViewModel.Articulo.IdArticulo) != null)
        {
            validarFormPedido = true;
            mensajeError = "Este articulo ya está en el detalle";
            return;
        }
        validarFormPedido = false;
        decimal precio = PedidoDetalleViewModel.Articulo.Precios.FirstOrDefault()?.PrecioCosto ?? 0;
        decimal total = precio * 1;
        PedidoVM.DetallePedido.Add(new DetallePedidoViewModel
        {
            IdDetallePedido = IdPedidoDetalle,
            IdArticulo = PedidoDetalleViewModel.Articulo.IdArticulo,
            Cantidad = 1,
            Articulo = PedidoDetalleViewModel.Articulo,
            Precio = PedidoDetalleViewModel.Articulo.Precios.FirstOrDefault()?.PrecioCosto ?? 0,
            Subtotal = total,
            Total = total
        }
        );
        PedidoDetalleViewModel = new DetallePedidoViewModel();

        CalcularTotales();
    }

    protected void CerraModalProducto()
    {
        ModalProducto.Hide();
    }

    private void EliminarDetalle(string IdDetalle)
    {

        int id = Convert.ToInt32(IdDetalle);
        var detalle = PedidoVM.DetallePedido.FirstOrDefault(x => x.IdDetallePedido == id);

        if (detalle != null)
        {
            PedidoVM.DetallePedido.Remove(detalle);
        }
        CalcularTotales();
    }

    private void CalcularTotales()
    {
        total = PedidoVM.DetallePedido.Sum(x => x.Total);
        subtotal = PedidoVM.DetallePedido.Sum(x => x.Subtotal);
        impuesto = PedidoVM.DetallePedido.Sum(x => x.Iva);
        descuento = PedidoVM.DetallePedido.Sum(x => x.Descuento);
    }

}
