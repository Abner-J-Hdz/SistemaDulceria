@inject IService service
@inject IJSRuntime js
@inject NavigationManager navigate

@using WebSistemaDulceria.Data.DulceriaService

<div class="d-flex  justify-content-between mb-2" style="">
    <div>
        <h2 class="text-primary">Articulos</h2>
    </div>
    <div class="align-content-end">
        <button title="Nuevo Articulo" type="button" class="btn btn-outline-info" @onclick="NuevoProveedor">
            <i class="bi bi-plus-circle m-1"></i> Nuevo
        </button>
    </div>
</div>

<span class="text-danger">@message</span>
<span class="text-danger">@error</span>

@*<div class="row">
        <div class="col">
            <div class="form-inline">

                <label class="sr-only" for="nombreProveedor">nombreProveedor</label>
                <div class="input-group mb-2 mr-sm-2">
                    <div class="input-group-prepend">
                        <div class="input-group-text">Nombre</div>
                    </div>
                    <input type="text" @bind-value="busqueda" class="form-control" id="txtbusquedaArticulo" placeholder="">
                </div>

                <button type="button" class="btn btn-outline-primary mb-2" @onclick="BuscarArticulos">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
    </div>*@

<div class="table-responsive">
    <table class="table table-bordered  table-striped table-hover">
        <thead>
            <tr>
                <th></th>
                <th scope="col">Cod</th>
                <th scope="col">Nombre</th>
                <th scope="col">Cod Barra</th>
                <th scope="col">Costo</th>
                <th scope="col">Precio Venta</th>
                @*<th scope="col">Cantidad Lote</th>*@
                <th scope="col">Cantidad Prod.Terminado</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Articulos)
            {
                <tr>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" title="Editar"
                                @onclick="@(e => EditaArticulo(e, item.IdArticulo))">
                            <i class="bi bi-pencil-square"></i>
                        </button>
                        <button @onclick="@(e => AlertaEliminarArticulo(e, item.IdArticulo, item.Nombre))"
                                class="btn btn-sm btn-outline-danger" title="Eliminar">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                    <td>@item.CodInterno</td>
                    <td>@item.Nombre</td>
                    <td>@item.CodBarra</td>
                    <td>@(item.Precios.FirstOrDefault()?.PrecioCosto?? 0)</td>
                    <td>@(item.Precios.FirstOrDefault()?.PrecioVenta ?? 0)</td>
                    @*<td>@(item.Lote.FirstOrDefault()?.Cantidad ?? 0)</td>*@
                    <td>@(item.DetalleProductoTerminado.FirstOrDefault()?.Cantidad ?? 0)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

<BSModal @ref="ModalNuevo" Size="Size.Large">
    <BSModalHeader OnClick="@(() => ModalNuevo.Hide())">Nuevo Proveedor</BSModalHeader>
    <BSModalBody>
        <FormularioArticulo ArticuloVM="articuloEdit" CerraModal="CerrarModalNuevo" />
    </BSModalBody>
</BSModal>

<BSModal @ref="ModalEdit" Size="Size.Large">
    <BSModalHeader OnClick="@(() => ModalEdit.Hide())">Nuevo Proveedor</BSModalHeader>
    <BSModalBody>
        <FormularioArticulo ArticuloVM="articuloEdit" CerraModal="CerrarModalEdit" />
    </BSModalBody>
</BSModal>


<BSModal @ref="ModalEliminar" Size="Size.Small">
    <BSModalHeader Class="bg-danger text-white" OnClick="@(() => ModalEliminar.Hide())">Eliminar articulo</BSModalHeader>
    <BSModalBody>
        <p>
            <span>Está seguro de eliminar el articulo <strong>@nombreArticulo</strong> ?</span>
        </p>
    </BSModalBody>
    <div class="modal-footer">
        <button class="btn btn-outline-danger" @onclick="CerrarModalEliminar"><i class="bi bi-x-circle mr-1"></i>Cerrar</button>
        <button class="btn btn-outline-primary" @onclick="EliminarArticulo"><i class="bi bi-trash mr-1 "></i>Eliminar</button>
    </div>
</BSModal>

@code {
    List<ArticuloViewModel> Articulos = new List<ArticuloViewModel>();
    List<ArticuloViewModel> ArticulosTemp = new List<ArticuloViewModel>();

    ArticuloViewModel articuloEdit = new ArticuloViewModel();

    string message = "";
    string error = "";
    string busqueda = "";
    string nombreArticulo = "";
    int idArticuloEliminar = 0;

    Data ServiceData = new Data();

    BSModal ModalEdit { get; set; }
    BSModal ModalNuevo { get; set; }
    BSModal ModalEliminar { get; set; }

    protected void NuevoProveedor()
    {
        ModalNuevo.Show();
    }

    protected override async Task OnInitializedAsync()
    {
        Articulos = service.ObtenerArticulos();
        ArticulosTemp = Articulos;
        Articulos.ForEach(x => x.PrecioCosto = x.Precios.FirstOrDefault()?.PrecioCosto ?? 0);
        Articulos.ForEach(x => x.PrecioVenta = x.Precios.FirstOrDefault()?.PrecioVenta ?? 0);
    }

    protected void BuscarArticulos()
    {
        if (string.IsNullOrEmpty(busqueda))
            Articulos = ArticulosTemp;
        else
            Articulos = ArticulosTemp.Where(x => x.Nombre.ToLower().Contains(busqueda.ToLower())).ToList();
    }

    protected void EditaArticulo(EventArgs e, int IdArticulo)
    {
        articuloEdit = Articulos.FirstOrDefault(x => x.IdArticulo == IdArticulo);
        ModalEdit.Show();
    }


    protected void AlertaEliminarArticulo(EventArgs e, int IdProveedor, string nombreProveedorEliminar)
    {
        ModalEliminar.Show();
        nombreArticulo = nombreProveedorEliminar;
        idArticuloEliminar = IdProveedor;
    }

    protected void CerrarModalEliminar()
    {
        idArticuloEliminar = 0;

        ModalEliminar.Hide();
    }

    protected async void EliminarArticulo()
    {
        try
        {
            var respuesta = await service.EliminarArticulo(idArticuloEliminar);
            if (respuesta.Ok)
            {
                await js.InvokeVoidAsync("showAlert", "success", respuesta.Message, "");
                CerrarModalEliminar();
                await Task.Delay(1600).ContinueWith((task) =>
                {
                    navigate.NavigateTo("productos", forceLoad: true);
                });
            }
        }
        catch (Exception)
        {

            throw;
        }

    }

    protected void CerrarModalNuevo()
    {
        ModalNuevo.Hide();
    }

    protected void CerrarModalEdit()
    {
        ModalEdit.Hide();
    }

}
