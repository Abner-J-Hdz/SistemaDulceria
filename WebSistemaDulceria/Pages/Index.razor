@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavManager
@inject IService service
@inject IData dataService
@page "/"
@attribute [Authorize]

@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Layouts

<h3 class="text-primary">Dashboard</h3>
<div class="row">
    <div class="col-md-6 col-sm-12 mr-auto ml-auto" style="">
        <EditForm EditContext="EditContext"  >
            <div class="row">
                <div class="col">
                    <label>Fecha inicio</label>
                    <InputDate @bind-Value="fechas.fechaInicio" class="form-control" />
                </div>
                <div class="col">
                    <label>Fecha fin</label>
                    <InputDate @bind-Value="fechas.fechaFin" class="form-control" max="@DateTime.Now.ToString("yyyy-MM")" />
                </div>
            </div>
        </EditForm>
    </div>
</div>
<div class="row">
    <div class="col-md-6">

        <SfAccumulationChart Title="Articulos mas vendidos" EnableAnimation="true" Width="@Width" Height="@Height" EnableBorderOnMouseMove="false" EnableSmartLabels="true">
            <AccumulationChartBorder Color="transparent"></AccumulationChartBorder>
            <AccumulationChartTooltipSettings Enable="true" Format="${point.x}"></AccumulationChartTooltipSettings>
            <AccumulationChartSeriesCollection>
                <AccumulationChartSeries DataSource="@charData" Radius="@Radius" XName="Nombre" YName="CantidadVendida" InnerRadius="40%" Palettes="@palettes">
                    <AccumulationChartSeriesBorder Color="@Color" Width="3"></AccumulationChartSeriesBorder>
                    <AccumulationDataLabelSettings Visible="true" Name="DataLabel" Position="AccumulationLabelPosition.Inside">
                        <AccumulationChartDataLabelFont FontWeight="600"></AccumulationChartDataLabelFont>
                        <AccumulationChartConnector Length="30px" Type="ConnectorType.Curve"></AccumulationChartConnector>
                    </AccumulationDataLabelSettings>
                </AccumulationChartSeries>
            </AccumulationChartSeriesCollection>
            <AccumulationChartLegendSettings Visible="false"></AccumulationChartLegendSettings>
        </SfAccumulationChart>

    </div>
    <div class="col-md-6">
        <SfChart Title="Top 10 clientes" Width="@Width">
            <ChartArea><ChartAreaBorder Width="0"></ChartAreaBorder></ChartArea>
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category">
                <ChartAxisMajorGridLines Width="0"></ChartAxisMajorGridLines>
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
            </ChartPrimaryXAxis>
            <ChartPrimaryYAxis Title="Total" LabelFormat="{value}" EdgeLabelPlacement="EdgeLabelPlacement.Shift">
                <ChartAxisMajorTickLines Width="0"></ChartAxisMajorTickLines>
                <ChartAxisLineStyle Width="0"></ChartAxisLineStyle>
            </ChartPrimaryYAxis>
            <ChartTooltipSettings Enable="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="true" ></ChartLegendSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@charBarData" XName="Nombre" YName="Total" Name="Total comprado" Width="2" ColumnSpacing="0.1" Type="ChartSeriesType.Bar">
                    <ChartMarker>
                        <ChartDataLabel Visible="false" Position="LabelPosition.Middle">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>
                @*<ChartSeries DataSource="@charBarData" XName="Nombre" YName="NumeroVentas" Name="Numero de compras realizadas" Width="2" ColumnSpacing="0.1" Type="ChartSeriesType.Bar">
                    <ChartMarker>
                        <ChartDataLabel Visible="false" Position="LabelPosition.Middle">
                            <ChartDataLabelFont FontWeight="600" Color="#ffffff"></ChartDataLabelFont>
                        </ChartDataLabel>
                    </ChartMarker>
                </ChartSeries>*@
            </ChartSeriesCollection>
        </SfChart>
    </div>
</div>


@code {
    private EditContext EditContext;
    FechasDashboard fechas = new FechasDashboard();

    //fechaInicio = DateTime.Now;
    //fechaFin = DateTime.Now;

    private bool isAuthenticated;
    SfChart chart1;
    string Width = "100%";
    string Height = "100%";
    string Color;
    string Radius = "80%";
    int columns, pieColumn, splineRow, columnSizeX, columnSizeY,
    pieSizeX, pieSizeY, splineSizeX, splineSizeY;
    SfDashboardLayout sfDashboardLayout;
    private string[] palettes = new string[] { "#61EFCD", "#CDDE1F", "#FEC200", "#CA765A", "#2485FA", "#F57D7D", "#C152D2",
    "#8854D9", "#3D4EB8", "#00BCD7","#4472c4", "#ed7d31", "#ffc000", "#70ad47", "#5b9bd5", "#c1c1c1", "#6f6fe2", "#e269ae", "#9e480e", "#997300" };

    List<ArticuloViewModel> charData = new List<ArticuloViewModel>();
    List<ClientesMasCompras> charBarData= new List<ClientesMasCompras>();
    //List<ClientesMasCompras> charBarData

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = (await AuthenticationStateProvider.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated;
        if (!isAuthenticated)
            NavManager.NavigateTo("/login/");


        EditContext = new EditContext(fechas);
        EditContext.OnFieldChanged += EditContext_OnFieldChanged;

        base.OnInitialized();

        charData = dataService.ArticulosVendidos(DateTime.Now,DateTime.Now);
        charBarData = dataService.ClientesMasCompras(DateTime.Now, DateTime.Now);
    }

    // Note: The OnFieldChanged event is raised for each field in the model
    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
        charData = dataService.ArticulosVendidos(fechas.fechaInicio, fechas.fechaFin);
        charBarData = dataService.ClientesMasCompras(fechas.fechaInicio, fechas.fechaFin);
    }



    void ChartLoad(ILoadedEventArgs Args)
    {

    }


}