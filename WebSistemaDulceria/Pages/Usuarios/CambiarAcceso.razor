@page "/cambiaracceso"
@inject IJSRuntime js
@inject NavigationManager navigate

@inject IService service

@attribute [Authorize]

<div class="row">
    <div class="col-md-6 offset-md-3">
        <span class="anchor" id="formLogin"></span>

        <div class="card card-outline-secondary">
            <div class="card-header">
                <h3 class="mb-0">Cambiar Contraseña</h3>
            </div>

            <div class="card-body">
                <EditForm Model="UsuarioPasswordVM" OnValidSubmit="ValidarFormulario" class="form">
                    <DataAnnotationsValidator />
                    <div class="form-group">
                        <label for="uname1">Nueva contraseña</label>
                        <input type="password" class="form-control" placeholder="Nueva contraseña" required="" @bind-value="UsuarioPasswordVM.Contrasena">
                        <div class="invalid-feedback">Please enter your username or email</div>
                    </div>
                    <div class="form-group">
                        <label>Repite contraseña</label>
                        <input type="password" class="form-control" placeholder="Repite contraseña" cambiaracceso @bind-value="UsuarioPasswordVM.RepiteContrasena">
                        <div class="invalid-feedback">Please enter a password</div>
                    </div>

                    <button type="submit" class="btn btn-outline-primary btn-lg float-right"><i class="bi bi-arrow-repeat mr-1"></i> Cambiar Contraseña</button>
                </EditForm>
            </div>
        </div>
    </div>
</div>

@code {
    CambiarPasswordViewModel UsuarioPasswordVM = new CambiarPasswordViewModel();

    public Response respuesta { get; set; }

    protected async void ValidarFormulario()
    {
        string emailUser = await js.InvokeAsync<string>("getUserEmail", "");

        if (UsuarioPasswordVM.Contrasena == UsuarioPasswordVM.RepiteContrasena)
        {
            respuesta = await service.CambiarContraseña(emailUser, UsuarioPasswordVM.Contrasena);
        }
        else
        {

        }
        if (respuesta.Ok)
        {
            await js.InvokeVoidAsync("showAlert", "success", respuesta.Message, "");
            await Task.Delay(1600).ContinueWith((task) =>
            {
                navigate.NavigateTo("cambiaracceso", forceLoad: true);
            });
        }
        else
        {
            await js.InvokeVoidAsync("showAlert", "error", respuesta.Message, respuesta.Error);
        }

    }
}
